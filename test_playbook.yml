# ---
#   - name: test playbook
#     hosts: httpd_servers
#     gather_facts: no
#     become: yes
#     tasks:

#       - name: Create httpd.service file with content
#         copy:
#           content: |
#             [Unit]
#             Description=The Apache HTTP
#             After=network.target

#             [Service]
#             Type=forking
#             ExecStart=/opt/apache2.4.48//bin/apachectl -k start
#             ExecReload=/opt/apache2.4.48//bin/apachectl -k graceful
#             ExecStop=/opt/apache2.4.48//bin/apachectl -k graceful-stop
#             PIDFile=/opt/apache2.4.48//logs/httpd.pid

#             PrivateTmp=true

#             [Install]
#             WantedBy=multi-user.target
#           dest: /etc/systemd/system/httpd.service
#         register: httpd_service

#       - name: display service facts
#         debug:
#           var: httpd_service


  #     - name: create installer directory
  #       file:
  #         path: /opt/installer
  #         state: directory
  #       register: directory_result
        
  #     - name: show registered directory
  #       debug:
  #         var: directory_result

      # - name: Extract httpd and dependencies
      #   shell: "tar -zxvf {{ item }}"
      #   with_items:
      #     - "{{ httpd_download.dest }}"
      #   register: httpd_extracted

      # - name: Extract httpd and dependencies
      #   shell: "tar -zxvf {{ item }}"
      #   with_items:
      #     - "{{ apr_download.dest }}"
      #   register: apr_extracted

      # - name: Extract httpd and dependencies
      #   shell: "tar -zxvf {{ item }}"
      #   with_items:
      #     - "{{ apr-util_download.dest }}"
      #   register: apr-util_extracted

      # - name: extract apr-util only
      #   set_fact:
      #     apr_util_name: "{{ apr_util_directory_name | split('-')[0] }}"

      # - name: Display name apr-util
      #   debug:
      #     var: apr_util_name

      # - name: Copy apr files to httpd
      #   copy:
      #     src: "{{ httpd_extracted.dest }}"
      #     dest: "{{ httpd_extracted.dest }}/srclib/{{  }}"

      # - name: Copy apr files to httpd
      #   shell: "cp -r {{ directory_result.stdout }}/{{ item }} {{ httpd_extracted.stdout }}/srclib/{{ item }}"
      #   args:
      #     chdir: "{{ directory_result.stdout }}"
      #   with_items:
      #     - "{{ apr_extracted.stdout }}"
      #     - "{{ apr-util_extracted.stdout }}"

      # - name: Copy apr files to httpd
      #   copy:
      #     src: "{{ directory_result.path }}/{{ apr_directory_path }}"
      #     dest: "{{ directory_result.path }}/{{ httpd_directory_name }}/srclib/{{ apr_directory_name }}"
      #     remote_src: yes
      #     recurse: yes
      #   register: copied_apr_files

      # - name: Copy apr-util files to httpd
      #   copy:
      #     src: "{{ directory_result.path }}/{{ apr_util_directory_path }}"
      #     dest: "{{ directory_result.path }}/{{ httpd_directory_name }}/srclib/{{ apr_util_directory_name }}"
      #     remote_src: yes
      #     recurse: yes
      #   register: copied_apr_util_files

          ##{{ apr-util-1.6.1 | basename | regex_replace('\\\\.tar\\\\.gz$', '') | regex_replace('-.*', '') }}

          ##apr_util_directory_name: "{{ apr_util_extracted.src | basename | regex_replace('\\\\.tar\\\\.gz$', '') | regex_replace('(.+?-[^-]+)-.*$', '\\1') }}"

      # - name: Get installer directory httpd
      #   set_fact:
      #     httpd_installer_path: /opt/installer/httpd-2.4.48.tar.gz

      # - name: display installer directory httpd
      #   debug:
      #     var: httpd_installer_path

      # - name: Get installer directory apr
      #   set_fact:
      #     apr_installer_path: /opt/installer/apr-1.7.0.tar.gz

      # - name: display installer directory apr
      #   debug:
      #     var: apr_installer_path

      # - name: Get installer directory apr-util
      #   set_fact:
      #     apr_util_installer_path: /opt/installer/apr-util-1.6.1.tar.gz

      # - name: display installer directory util
      #   debug:
      #     var: apr_util_installer_path

      # - name: Download latest httpd and dependencies
      #   get_url:
      #     url: "{{ item.url }}"
      #     dest: "{{ item.dest }}"
      #   with_items:
      #     - { url: "https://archive.apache.org/dist/httpd/httpd-2.4.48.tar.gz", dest: "/opt/installer/httpd-2.4.48.tar.gz" }
      #     - { url: "https://archive.apache.org/dist/apr/apr-1.7.0.tar.gz", dest: "/opt/installer/apr-1.7.0.tar.gz" }
      #     - { url: "https://archive.apache.org/dist/apr/apr-util-1.6.1.tar.gz", dest: "/opt/installer/apr-util-1.6.1.tar.gz" }

      # - name: Extract the installers
      #   shell: "tar -zxvf {{ item }}.tar.gz"
      #   args:
      #     chdir: /opt/installer
      #   with_items:
      #     - httpd-2.4.48
      #     - apr-1.7.0
      #     - apr-util-1.6.1

      # - name: Copy apr files to httpd
      #   shell: "cp -r {{ item }} httpd-2.4.48/srclib/{{ item }}"
      #   args:
      #     chdir: /opt/installer
      #   with_items:
      #     - apr-1.7.0
      #     - apr-util-1.6.1

      # - name: Select the default Python
      #   shell: "sudo alternatives --config python"

      # - name: Compile httpd installer
      #   command: |
      #     ./buildconf
      #     ./configure --with-included-apr --prefix=/opt/apache2.4.48_NEW/ --enable-ssl --enable-so
      #     make
      #     sudo make install
      #   args:
      #     chdir: /opt/installer/httpd-2.4.48_NEW

      # - name: Gather facts about services
      #   service_facts:

      # - name: Display active services
      #   debug:
      #     var: ansible_facts.services

      # - name: Gather facts about services
      #   service_facts:

      # - name: Display active services
      #   debug:
      #     msg: "{{ item }}"
      #   loop: "{{ ansible_facts.services | selectattr('state', 'equalto', 'running') | map(attribute='name') | list }}"

      # - name: Find HTTPD-related service files
      #   find:
      #     paths: /etc/systemd/system
      #     patterns: 'httpd*.service'
      #     file_type: file
      #   register: httpd_services

      # - name: Create an array with HTTPD service names
      #   set_fact:
      #     httpd_services_array: "{{ httpd_services.files | map(attribute='path') | map('basename') | list }}"

      # - name: Display the HTTPD services array
      #   debug:
      #     var: httpd_services_array

      # - name: Display httpd service status array
      #   debug:
      #     var: httpd_service_status